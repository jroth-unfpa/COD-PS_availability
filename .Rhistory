# Make the plot
g_donut <- ggplot(data,
aes(ymax=ymax,
ymin=ymin,
xmax=4,
xmin=3,
fill=action)) +
geom_rect() +
geom_text_repel(x=5.2,
col="black",
aes(y=labelPosition,
label=label,
color=action),
size=3) + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Dark2") +
#  scale_color_brewer(palette="Dark2") +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none") +
theme(plot.margin=unit(c(1, 1, 1, 1),"cm"))
return(g_donut)
}
get_donut(data=table_recommended_action,
name.action="action",
name.count="count")
# Compute a good label
data$label <- paste0(data[, name.action],
"\n",
data[, name.count],
" (",
data$percentage,
"%)")
# Donut plots are not provided by ggplot2 or base R so I am hacking it together with this guide:
# https://www.r-graph-gallery.com/128-ring-or-donut-plot.html, sinice donut plots have to be
get_donut <- function(data,
name.action,
name.count) {
# Compute percentages
data$fraction <- data[, name.count] / sum(data[, name.count],
na.rm=TRUE)
data$percentage <- round(data$fraction * 100, 1)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2
# Compute a good label
data$label <- paste0(data[, name.action],
"\n",
data[, name.count],
" (",
data$percentage,
"%)")
# Make the plot
g_donut <- ggplot(data,
aes(ymax=ymax,
ymin=ymin,
xmax=4,
xmin=3,
fill=action)) +
geom_rect() +
geom_text_repel(x=5.2,
col="black",
aes(y=labelPosition,
label=label,
color=action),
size=3) + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Dark2") +
#  scale_color_brewer(palette="Dark2") +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none") +
theme(plot.margin=unit(c(1, 1, 1, 1),"cm"))
return(g_donut)
}
get_donut(data=table_recommended_action,
name.action="action",
name.count="count")
head(our_data)
table(our_data$`UNFPA Region`)
## also save region-specific tabulations of recommended action
table_recommended_action_APRO <- table_recommended_action %>%
filter(UNFPA Region == "APRO")
get_table_recommended_action <- function(data,
var.name.action,
var.name.region) {
table_recommended_action <- as.data.frame(table(data[, var.name.action],
useNA="always"))
table_recommended_action <- table_recommended_action %>% rename("action"="Var1",
"action"="Freq")
## sort categories by descending frequency
test <- table_recommended_action %>%
arrange(desc(count)) %>%
select(action) %>%
pull() %>%
as.character()
table_recommended_action$action <- factor(as.character(table_recommended_action$action),
levels=test)
return(table_recommended_action)
}
table_recommended_action
our_data
head(our_data)
names(our_data)
var.name.region <- "UNFPA Region"
stopifnot(var.name.region %in% names(data))
get_table_recommended_action <- function(data,
var.name.action,
var.name.region,
specific.region=NULL) {
# restrict data to a single region, if specified
if (is.null(specific.region) == FALSE) {
stopifnot(var.name.region %in% names(data))
stopifnot(specific.region %in% unique(data[, var.name.region]))
data <- data[data[, var.name.region] == specific.region, ]
}
table_recommended_action <- as.data.frame(table(data[, var.name.action],
useNA="always"))
table_recommended_action <- table_recommended_action %>% rename("action"="Var1",
"count"="Freq")
# sort categories by descending frequency
test <- table_recommended_action %>%
arrange(desc(count)) %>%
select(action) %>%
pull() %>%
as.character()
table_recommended_action$action <- factor(as.character(table_recommended_action$action),
levels=test)
return(table_recommended_action)
}
get_table_recommended_action(data=our_data,
var.name.action="action",
var.name.region="UNFPA Region")
get_table_recommended_action <- function(data,
var.name.action,
var.name.region,
specific.region=NULL) {
# restrict data to a single region, if specified
if (is.null(specific.region) == FALSE) {
stopifnot(var.name.region %in% names(data))
stopifnot(specific.region %in% unique(data[, var.name.region]))
data <- data[data[, var.name.region] == specific.region, ]
}
table_recommended_action <- as.data.frame(table(data[, var.name.action],
useNA="always"))
table_recommended_action <- table_recommended_action %>% rename("action"="Var1",
"count"="Freq")
# sort categories by descending frequency
test <- table_recommended_action %>%
arrange(desc(count)) %>%
select(action) %>%
pull() %>%
as.character()
table_recommended_action$action <- factor(as.character(table_recommended_action$action),
levels=test)
return(table_recommended_action)
}
get_table_recommended_action(data=our_data,
var.name.action="action",
var.name.region="UNFPA Region")
var.name.action="action"
var.name.region="UNFPA Region"
specific.region
specific.region = NULL
specific.region
head(data)
our_data
data = our_data
# restrict data to a single region, if specified
if (is.null(specific.region) == FALSE) {
stopifnot(var.name.region %in% names(data))
stopifnot(specific.region %in% unique(data[, var.name.region]))
data <- data[data[, var.name.region] == specific.region, ]
}
table_recommended_action <- as.data.frame(table(data[, var.name.action],
useNA="always"))
names(our_data)
get_table_recommended_action(data=our_data,
var.name.action="UNFPA - recommended action",
var.name.region="UNFPA Region")
rm(data)
rm(our_data)
data_global <- get_table_recommended_action(data=our_data,
var.name.action="UNFPA - recommended action",
var.name.region="UNFPA Region")
our_url <- "https://docs.google.com/spreadsheets/d/1hjI8synLx3yfjTvfLBKgQc3Hj-XU_Lhoww_DxUTe59A/edit#gid=0"
our_data_for_names <- read_sheet(ss=our_url,
skip=8)
names(our_data_for_names)
our_data <- read_sheet(ss=our_url,
skip=10) %>%
as.data.frame()
names(our_data) <- names(our_data_for_names)
get_table_recommended_action <- function(data,
var.name.action,
var.name.region,
specific.region=NULL) {
# restrict data to a single region, if specified
if (is.null(specific.region) == FALSE) {
stopifnot(var.name.region %in% names(data))
stopifnot(specific.region %in% unique(data[, var.name.region]))
data <- data[data[, var.name.region] == specific.region, ]
}
table_recommended_action <- as.data.frame(table(data[, var.name.action],
useNA="always"))
table_recommended_action <- table_recommended_action %>% rename("action"="Var1",
"count"="Freq")
# sort categories by descending frequency
test <- table_recommended_action %>%
arrange(desc(count)) %>%
select(action) %>%
pull() %>%
as.character()
table_recommended_action$action <- factor(as.character(table_recommended_action$action),
levels=test)
return(table_recommended_action)
}
data_global <- get_table_recommended_action(data=our_data,
var.name.action="UNFPA - recommended action",
var.name.region="UNFPA Region")
get_treemap <- function(data,
name.action,
name.count) {
n_countries <- sum(data[, name.count],
na.rm=TRUE)
data$percentage <- data[, name.count] / n_countries
data$action_and_count <- paste0(data[, name.action],
"\n",
data[, name.count],
" (",
round(100 * data$percentage,
1),
"%)")
treemap(data,
# data
index="action_and_count",
vSize=name.count,
type="index",
# Main
title="",
palette="Dark2",
# Borders:
border.col=c("black"),
border.lwds=1,
# Labels
fontsize.labels=12,
fontcolor.labels="white",
fontface.labels=1,
bg.labels=c("transparent"),
align.labels=c("left", "top"),
overlap.labels=0.5,
inflate.labels=FALSE)
}
our_url <- "https://docs.google.com/spreadsheets/d/1hjI8synLx3yfjTvfLBKgQc3Hj-XU_Lhoww_DxUTe59A/edit#gid=0"
our_data_for_names <- read_sheet(ss=our_url,
skip=8)
names(our_data_for_names)
our_data <- read_sheet(ss=our_url,
skip=10) %>%
as.data.frame()
names(our_data) <- names(our_data_for_names)
get_table_recommended_action <- function(data,
var.name.action,
var.name.region,
specific.region=NULL) {
# restrict data to a single region, if specified
if (is.null(specific.region) == FALSE) {
stopifnot(var.name.region %in% names(data))
stopifnot(specific.region %in% unique(data[, var.name.region]))
data <- data[data[, var.name.region] == specific.region, ]
}
table_recommended_action <- as.data.frame(table(data[, var.name.action],
useNA="always"))
table_recommended_action <- table_recommended_action %>% rename("action"="Var1",
"count"="Freq")
# sort categories by descending frequency
test <- table_recommended_action %>%
arrange(desc(count)) %>%
select(action) %>%
pull() %>%
as.character()
table_recommended_action$action <- factor(as.character(table_recommended_action$action),
levels=test)
return(table_recommended_action)
}
get_lollipop <- function(data,
name.action,
name.count) {
g_global <- ggplot(data,
aes_string(x=name.action,
y=name.count))
g_global <- g_global +
geom_point(size=2) +
geom_segment(aes_string(x=name.action,
xend=name.action,
y=0,
yend=name.count))
theme_classic() +
theme(axis.text.x=element_text(size=8))
return(g_global)
}
get_treemap <- function(data,
name.action,
name.count) {
n_countries <- sum(data[, name.count],
na.rm=TRUE)
data$percentage <- data[, name.count] / n_countries
data$action_and_count <- paste0(data[, name.action],
"\n",
data[, name.count],
" (",
round(100 * data$percentage,
1),
"%)")
treemap(data,
# data
index="action_and_count",
vSize=name.count,
type="index",
# Main
title="",
palette="Dark2",
# Borders:
border.col=c("black"),
border.lwds=1,
# Labels
fontsize.labels=12,
fontcolor.labels="white",
fontface.labels=1,
bg.labels=c("transparent"),
align.labels=c("left", "top"),
overlap.labels=0.5,
inflate.labels=FALSE)
}
# Donut plots are not provided by ggplot2 or base R so I am hacking it together with this guide:
# https://www.r-graph-gallery.com/128-ring-or-donut-plot.html, sinice donut plots have to be
get_donut <- function(data,
name.action,
name.count) {
# Compute percentages
data$fraction <- data[, name.count] / sum(data[, name.count],
na.rm=TRUE)
data$percentage <- round(data$fraction * 100, 1)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2
# Compute a good label
data$label <- paste0(data[, name.action],
"\n",
data[, name.count],
" (",
data$percentage,
"%)")
# Make the plot
g_donut <- ggplot(data,
aes(ymax=ymax,
ymin=ymin,
xmax=4,
xmin=3,
fill=action)) +
geom_rect() +
geom_text_repel(x=5.2,
col="black",
aes(y=labelPosition,
label=label,
color=action),
size=3) + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Dark2") +
#  scale_color_brewer(palette="Dark2") +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none") +
theme(plot.margin=unit(c(1, 1, 1, 1),"cm"))
return(g_donut)
}
data_global <- get_table_recommended_action(data=our_data,
var.name.action="UNFPA - recommended action",
var.name.region="UNFPA Region")
g_lollipop_global <- get_lollipop(data=data_global,
name.action="action",
name.count="count")
g_lollipop_global + labs(x="",
y="Count")
get_treemap(data=table_recommended_action,
name.action="action",
name.count="count")
data_global
table_action_global <- get_table_recommended_action(data=our_data,
var.name.action="UNFPA - recommended action",
var.name.region="UNFPA Region")
g_lollipop_global <- get_lollipop(data=table_action_global,
name.action="action",
name.count="count")
g_lollipop_global + labs(x="",
y="Count")
get_treemap(data=table_action_global,
name.action="action",
name.count="count")
get_donut(data=table_action_global,
name.action="action",
name.count="count")
table(our_data$`UNFPA Region`)
table_action_APRO <- get_table_recommended_action(data=our_data,
var.name.action="UNFPA - recommended action",
var.name.region="UNFPA Region",
specific.region="APRO")
table_action_APRO
table_action_EECARO <- get_table_recommended_action(data=our_data,
var.name.action="UNFPA - recommended action",
var.name.region="UNFPA Region",
specific.region="EECARO")
table_action_APRO <- get_table_recommended_action(data=our_data,
var.name.action="UNFPA - recommended action",
var.name.region="UNFPA Region",
specific.region="APRO")
table_action_ASRO <- get_table_recommended_action(data=our_data,
var.name.action="UNFPA - recommended action",
var.name.region="UNFPA Region",
specific.region="ASRO")
table_action_EECARO <- get_table_recommended_action(data=our_data,
var.name.action="UNFPA - recommended action",
var.name.region="UNFPA Region",
specific.region="EECARO")
table_action_ESARO <- get_table_recommended_action(data=our_data,
var.name.action="UNFPA - recommended action",
var.name.region="UNFPA Region",
specific.region="ESARO")
table_action_LACRO <- get_table_recommended_action(data=our_data,
var.name.action="UNFPA - recommended action",
var.name.region="UNFPA Region",
specific.region="LACRO")
table_action_WCARO <- get_table_recommended_action(data=our_data,
var.name.action="UNFPA - recommended action",
var.name.region="UNFPA Region",
specific.region="WCARO")
data=our_data
var.name.action="action"
var.name.region="UNFPA Region"
table_recommended_action <- as.data.frame(table(data[, var.name.action],
useNA="always"))
var.name.region
names(data)
var.name.action="UNFPA - recommended action"
table_recommended_action <- as.data.frame(table(data[, var.name.action],
useNA="always"))
table_recommended_action
table_action_APRO <- get_table_recommended_action(data=our_data,
var.name.action="UNFPA - recommended action",
var.name.region="UNFPA Region",
specific.region="APRO")
table_action_ASRO <- get_table_recommended_action(data=our_data,
var.name.action="UNFPA - recommended action",
var.name.region="UNFPA Region",
specific.region="ASRO")
table_action_EECARO <- get_table_recommended_action(data=our_data,
var.name.action="UNFPA - recommended action",
var.name.region="UNFPA Region",
specific.region="EECARO")
table_action_ESARO <- get_table_recommended_action(data=our_data,
var.name.action="UNFPA - recommended action",
var.name.region="UNFPA Region",
specific.region="ESARO")
table_action_LACRO <- get_table_recommended_action(data=our_data,
var.name.action="UNFPA - recommended action",
var.name.region="UNFPA Region",
specific.region="LACRO")
table_action_WCARO <- get_table_recommended_action(data=our_data,
var.name.action="UNFPA - recommended action",
var.name.region="UNFPA Region",
specific.region="WCARO")
g_lollipop_ASRO <- get_lollipop(data=table_action_ASRO,
name.action="action",
name.count="count")
g_lollipop_ASRO <- get_lollipop(data=table_action_ASRO,
name.action="action",
name.count="count")
g_lollipop_ASRO + labs(x="",
y="Count",
title-"ASRO")
g_lollipop_ASRO + labs(x="",
y="Count",
title="ASRO")
get_treemap(data=table_action_ASRO,
name.action="action",
name.count="count")
table_action_ASRO
sum(table_action_ASRO)
sum(table_action_ASRO$count)
title=paste0("ASRO: ", sum(table_action_ASRO))
# should combine into 3x2 or 2x3 grid
g_lollipop_ASRO <- get_lollipop(data=table_action_ASRO,
name.action="action",
name.count="count")
g_lollipop_ASRO + labs(x="",
y="Count",
title="ASRO")
get_treemap(data=table_action_ASRO,
name.action="action",
name.count="count")
get_treemap(data=table_action_ASRO,
name.action="action",
name.count="count")
get_donut(data=table_action_ASRO,
name.action="action",
name.count="count")
